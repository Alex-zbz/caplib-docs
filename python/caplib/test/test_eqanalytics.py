import unittest
from datetime import datetime

from caplib.market import *
from caplib.analytics import *
from caplib.eqanalytics import *

class TestEqAnalytics(unittest.TestCase):

    def setUp(self):

        # Create calendar
        cal_cnbe = 'CAL_CNBE'      
        hol_serial_numbers =[44654, 44954]
        sbd_serial_numbers = [44655]
        # Convert list of serial numbers to datetime objects
        holidays = [datetime.fromordinal(sn) for sn in hol_serial_numbers]
        specials = [datetime.fromordinal(sn) for sn in sbd_serial_numbers]
        create_calendar(cal_cnbe, holidays, specials)
        
        # Create Pricing Settings with BLACK_SCHOLES_MERTON model and ANALYTICAL method 
        self.bsm_analytical_pricing_settings = create_pricing_settings(
            'CNY', False, 
            create_model_settings('BLACK_SCHOLES_MERTON'), 
            'ANALYTICAL', 
            create_pde_settings(), 
            create_monte_carlo_settings()
            )

        # Create Pricing Settings with BLACK_SCHOLES_MERTON model and PDE method
        self.bsm_pde_pricing_settings = create_pricing_settings(
            'CNY', False, 
            create_model_settings('BLACK_SCHOLES_MERTON'), 
            'PDE', 
            create_pde_settings(201, 401, -5, 5, 'MMT_NUM_STDEVS', 0.001, 'ADAPTIVE_GRID', 'CUBIC_SPLINE_INTERP'), 
            create_monte_carlo_settings()
            )

        # Create Pricing Settings with BLACK_SCHOLES_MERTON model and MONTE_CARLO method
        self.bsm_mc_pricing_settings = create_pricing_settings(
            'CNY', False, 
            create_model_settings('BLACK_SCHOLES_MERTON'), 
            'MONTE_CARLO', 
            create_pde_settings(), 
            create_monte_carlo_settings(8096, 'SOBOL_NUMBER', 1023, 'BROWNIAN_BRIDGE_METHOD', 'INVERSE_CUMULATIVE_METHOD',False, 1)
            )

        # Create Pricing Settings with Duprie Local Vol model and PDE method 
        self.duprie_pde_pricing_settings = create_pricing_settings(
            'CNY', False, 
            create_model_settings('DUPRIE_LOCAL_VOL',[201,401,4, 0.001]), 
            'PDE', 
            create_pde_settings(201, 401, -5, 5, 'MMT_NUM_STDEVS', 0.001, 'ADAPTIVE_GRID', 'CUBIC_SPLINE_INTERP'), 
            create_monte_carlo_settings()
            )

        # Create Pricing Settings with Duprie Local Vol model and MONTE_CARLO method
        self.duprie_mc_pricing_settings = create_pricing_settings(
            'CNY', False, 
            create_model_settings('DUPRIE_LOCAL_VOL',[201,401,4, 0.001]), 
            'MONTE_CARLO', 
            create_pde_settings(), 
            create_monte_carlo_settings(8096, 'SOBOL_NUMBER', 1023, 'BROWNIAN_BRIDGE_METHOD', 'INVERSE_CUMULATIVE_METHOD', False, 201)
            )
        
        # Create Risk Settings
        self.risk_settings = create_eq_risk_settings(
            create_ir_curve_risk_settings(
                delta=True, gamma=True, curvature=False, 
                shift=1.0e-4, curvature_shift=5.0e-1, 
                method='CENTRAL_DIFFERENCE_METHOD', granularity='TERM_BUCKET_RISK', 
                scaling_factor=1.0e-4, threading_mode='SINGLE_THREADING_MODE'),
            create_price_risk_settings(
                delta=True, gamma=True, curvature=False, 
                shift=1.0e-2, curvature_shift=5.0e-1, 
                method='CENTRAL_DIFFERENCE_METHOD', 
                scaling_factor=1.0e-2, threading_mode='SINGLE_THREADING_MODE'), 
            create_vol_risk_settings(
                vega=True, volga=True, 
                shift=1.0e-2, 
                method='CENTRAL_DIFFERENCE_METHOD', granularity='TERM_STRIKE_BUCKET_RISK', 
                scaling_factor=1.0e-2, threading_mode='SINGLE_THREADING_MODE'),
            create_price_vol_risk_settings(
                vanna=True, 
                price_shift=1.0e-2, vol_shift=1.0e-2, 
                method='CENTRAL_DIFFERENCE_METHOD', granularity='TERM_STRIKE_BUCKET_RISK', 
                price_scaling_factor=1.0e-2, vol_scaling_factor=1.0e-2, threading_mode='SINGLE_THREADING_MODE'), 
            create_dividend_curve_risk_settings(
                delta=True, gamma=True, 
                shift=1.0e-4, 
                method="CENTRAL_DIFFERENCE_METHOD", granularity="TOTAL_RISK", 
                scaling_factor=1.0e-4, threading_mode="SINGLE_THREADING_MODE"), 
            create_theta_risk_settings(
                theta=True, shift=1, scaling_factor=1./365.)
            )

        # Create Scenario Analysis Settings
        self.scenario_analysis_settings = create_scn_analysis_settings(
            scn_analysis_type = 'PRICE_VOL_SCN_ANALYSIS', 
            min_underlying_price=-20e-2, 
            max_underlying_price=20e-2, 
            num_price_scns = 11,
            price_scn_gen_type = 1,
            min_vol = -5.e-2, 
            max_vol = 5.e-2,
            num_vol_scns = 12, 
            vol_scn_gen_type=0,
            threading_mode='SINGLE_THREADING_MODE'
            )

        # Create Market Data
        self.as_of_date = datetime(2020, 2, 21)

        # Create IR Yield Curve
        self.ir_curve = create_ir_yield_curve(
            as_of_date = self.as_of_date,
            currency='CNY',
            term_dates=[
                datetime(2020, 2, 26), datetime(2020, 3, 2), datetime(2020, 3, 9), datetime(2020, 3, 24), datetime(2020, 5, 24), 
                datetime(2020, 8, 24), datetime(2020, 11, 24), datetime(2021, 2, 24), datetime(2022, 2, 24), datetime(2023, 2, 24),
                datetime(2024, 2, 24), datetime(2025, 2, 24), datetime(2027, 2, 24), datetime(2030, 2, 24)
                ],
            rates=[
                0.013549, 0.019776, 0.019769, 0.022484, 0.024174, 0.025682, 0.02651, 0.027133, 0.027431, 0.028483, 0.029728, 0.030841, 0.032693, 0.03441
                ],
            curve_name='CNY_SHIBOR_3M'
        )
        # equity spot price
        self.underlying_price = 2.958

        # dividend curve
        self.dividend_curve = create_dividend_curve(
            as_of_date = self.as_of_date,
            pillar_dates=[datetime(2020, 2, 26), datetime(2020, 3, 25), datetime(2020, 6, 24), datetime(2020, 9, 23)],
            pillar_values=[-0.051844, 0.017072, 0.033363, 0.040969],
            dividend_type='CONTINUOUS_DIVIDEND',
            interp_method='LINEAR_INTERP',
            extrap_method='FLAT_EXTRAP',
            day_count='ACTUAL_365_FIXED',
            yield_start_date=datetime(2020, 2, 26),
            pillar_names=None,
            curve_name='DIVIDEND_CURVE_50ETF'
        )

        # Create Option Quote Matrix
        self.eq_option_quote_matrix = create_eq_option_quote_matrix(
            exercise_type='EUROPEAN', 
            underlying_type="SPOT_UNDERLYING_TYPE", 
            term_dates=[datetime(2020, 2, 26), datetime(2020, 3, 25), datetime(2020, 6, 24), datetime(2020, 9, 23)], 
            payoff_types=['PUT'] * 10 + ['CALL'] * 5, 
            option_strikes=[2.5, 2.55, 2.6, 2.65, 2.7, 2.75, 2.8, 2.85, 2.9, 2.95, 3.0, 3.1, 3.2, 3.3, 3.4],
            option_prices=[
                [0.0002, 0.0002, 0.0002, 0.0002, 0.0004, 0.0008, 0.0015, 0.0023, 0.0065, 0.0184, 0.0053, 0.0012, 0.0005, 0.0001, 0.0001],
                [0.0027, 0.0033, 0.0040, 0.0054, 0.0081, 0.0113, 0.0172, 0.0270, 0.0400, 0.0608, 0.0498, 0.0216, 0.0110, 0.0066, 0.0046],
                [0.0201, 0.0230, 0.0281, 0.0345, 0.0433, 0.0541, 0.0668, 0.0818, 0.1004, 0.1229, 0.1325, 0.0935, 0.0659, 0.0470, 0.0330],
                [0.0365, 0.0434, 0.0516, 0.0612, 0.0724, 0.0862, 0.1015, 0.1184, 0.1381, 0.1595, 0.1930, 0.1483, 0.1298, 0.0897, 0.0702]
            ],
            underlying='50ETF.SSE'
        )

        # Build Volatility Surface
        self.vol_surf = eq_vol_surface_builder(
            as_of_date=self.as_of_date, 
            smile_method='SVI_SMILE_METHOD', 
            wing_strike_type='DELTA',
            lower=-0.001e-2,
            upper=0.001e-2, 
            option_quote_matrix=self.eq_option_quote_matrix, 
            underlying_prices=[self.underlying_price],
            discount_curve=self.ir_curve, 
            dividend_curve=self.dividend_curve,
            pricing_settings=self.bsm_analytical_pricing_settings,
            building_settings = [0.02, 0.04], 
            underlying='50ETF.SSE'
         )

        quanto_discount_curve = create_flat_ir_yield_curve(self.as_of_date, 'USD', 0.0)
        quanto_fx_vol_curve = create_flat_volatility_surface(self.as_of_date, 0.0)
        quanto_correlation = 0.0
        self.mkt_data_set = create_eq_mkt_data_set(
            as_of_date=self.as_of_date, 
            discount_curve=self.ir_curve,
            underlying_price=self.underlying_price, 
            vol_surf=self.vol_surf,
            dividend_curve=self.dividend_curve, 
            quanto_discount_curve=quanto_discount_curve,
            quanto_fx_vol_curve=quanto_fx_vol_curve, 
            quanto_correlation=quanto_correlation,
            underlying='50ETF.SSE')

    def test_create_eq_risk_settings(self):
        expected = b'\n!\x08\x01\x18\x01!-C\x1c\xeb\xe26\x1a?){\x14\xaeG\xe1zt?8\x01A-C\x1c\xeb\xe26\x1a?\x12\x1d\x08\x01!-C\x1c\xeb\xe26\x1a?){\x14\xaeG\xe1zt?A-C\x1c\xeb\xe26\x1a?\x1a\x12!-C\x1c\xeb\xe26\x1a?A-C\x1c\xeb\xe26\x1a?"$\x11-C\x1c\xeb\xe26\x1a?\x19-C\x1c\xeb\xe26\x1a?!-C\x1c\xeb\xe26\x1a?A-C\x1c\xeb\xe26\x1a?*\r\x08\x01\x10\x01\x19\x1ag\x016\x9fqf?'
        self.assertEqual(self.risk_settings.SerializeToString(), expected) 

    def test_create_eq_mkt_data_set(self):
        expected = b'\n\x07\x08\xe6\x0f\x10\x03\x18\t\x12X\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03CNY \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01\x1aX\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03USD \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01"\'\n\x13\t\xcd\xcc\xcc\xcc\xcc\xcc\x1a@\x12\x03CNY\x1a\x03USD\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1a\x07\x08\xe6\x0f\x10\x03\x18\t*\xed\x01\n \x08\x01\x10\x01\x18\x01 \x01(\x010\x028\x01I\x9a\x99\x99\x99\x99\x99\xa9?Q\x9a\x99\x99\x99\x99\x99\xd9?\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\x94?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\xa4?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01"\x07\x08\xe6\x0f\x10\x03\x18\n"\x07\x08\xe9\x0f\x10\x03\x18\n'
        test = self.mkt_data_set
        self.assertEqual(test.SerializeToString(), expected)

    def test_build_eq_index_dividend_curve(self):
        expected = b'\n\x07\x08\xe6\x0f\x10\x03\x18\t\x12X\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03CNY \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01\x1aX\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03USD \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01"\'\n\x13\t\xcd\xcc\xcc\xcc\xcc\xcc\x1a@\x12\x03CNY\x1a\x03USD\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1a\x07\x08\xe6\x0f\x10\x03\x18\t*\xed\x01\n \x08\x01\x10\x01\x18\x01 \x01(\x010\x028\x01I\x9a\x99\x99\x99\x99\x99\xa9?Q\x9a\x99\x99\x99\x99\x99\xd9?\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\x94?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\xa4?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01"\x07\x08\xe6\x0f\x10\x03\x18\n"\x07\x08\xe9\x0f\x10\x03\x18\n'
        result = build_eq_index_dividend_curve(
            as_of_date=self.as_of_date,
            term_dates=[
                datetime(2020, 2, 26),
                datetime(2020, 3, 25),
                datetime(2020, 6, 24),
                datetime(2020, 9, 23)
            ],
            future_prices=None,
            call_price_matrix=[
                [45.800, 40.800, 35.800, 30.800, 25.800, 20.800, 15.860, 10.810, 6.090, 2.320, 0.530, 0.120, 0.050, 0.010, 0.010, 0.010],
                [45.990, 41.320, 36.410, 31.650, 26.230, 22.310, 17.660, 13.650, 10.190, 7.190, 4.980, 2.160, 1.100, 0.660, 0.460, 0.300],
                [49.900, 45.500, 40.930, 36.660, 32.610, 28.660, 25.260, 21.460, 18.540, 15.780, 13.250, 9.350, 6.590, 4.700, 3.300, 2.420],
                [53.280, 49.320, 45.240, 41.260, 37.360, 33.900, 30.450, 27.420, 24.330, 21.570, 19.300, 14.830, 12.980, 8.970, 7.020]
            ],
            put_price_matrix=[
                [0.020, 0.020, 0.020, 0.020, 0.040, 0.080, 0.150, 0.230, 0.650, 1.840, 5.000, 14.720, 24.510, 34.300, 44.370, 54.370],
                [0.270, 0.330, 0.400, 0.540, 0.810, 1.130, 1.720, 2.700, 4.000, 6.080, 8.750, 16.000, 24.960, 34.310, 44.370, 54.370],
                [2.010, 2.300, 2.810, 3.450, 4.330, 5.410, 6.680, 8.180, 10.040, 12.290, 14.710, 20.760, 27.730, 35.690, 44.570, 54.370],
                [3.650, 4.340, 5.160, 6.120, 7.240, 8.620, 10.150, 11.840, 13.810, 15.950, 18.410, 23.940, 30.380, 37.590, 45.670]
            ],
            strike_matrix=[
                [2.50, 2.55, 2.60, 2.65, 2.70, 2.75, 2.80, 2.85, 2.90, 2.95, 3.00, 3.10, 3.20, 3.30, 3.40, 3.50],
                [2.50, 2.55, 2.60, 2.65, 2.70, 2.75, 2.80, 2.85, 2.90, 2.95, 3.00, 3.10, 3.20, 3.30, 3.40, 3.50],
                [2.50, 2.55, 2.60, 2.65, 2.70, 2.75, 2.80, 2.85, 2.90, 2.95, 3.00, 3.10, 3.20, 3.30, 3.40, 3.50],
                [2.50, 2.55, 2.60, 2.65, 2.70, 2.75, 2.80, 2.85, 2.90, 2.95, 3.00, 3.10, 3.20, 3.30, 3.40]
            ],
            spot=self.underlying_price,
            discount_curve=self.ir_curve,
            name='50ETF.SSE'
        )

        self.assertEqual(result.SerializeToString(), expected)

    def test_create_eq_option_quote_matrix(self):
        expected = b'\n\x07\x08\xe6\x0f\x10\x03\x18\t\x12X\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03CNY \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01\x1aX\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03USD \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01"\'\n\x13\t\xcd\xcc\xcc\xcc\xcc\xcc\x1a@\x12\x03CNY\x1a\x03USD\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1a\x07\x08\xe6\x0f\x10\x03\x18\t*\xed\x01\n \x08\x01\x10\x01\x18\x01 \x01(\x010\x028\x01I\x9a\x99\x99\x99\x99\x99\xa9?Q\x9a\x99\x99\x99\x99\x99\xd9?\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\x94?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\xa4?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01"\x07\x08\xe6\x0f\x10\x03\x18\n"\x07\x08\xe9\x0f\x10\x03\x18\n'
        
        result = self.eq_option_quote_matrix

        self.assertEqual(result.SerializeToString(), expected)

    def test_create_proxy_option_quote_matrix(self):
        expected = b'\n\x07\x08\xe6\x0f\x10\x03\x18\t\x12X\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03CNY \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01\x1aX\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03USD \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01"\'\n\x13\t\xcd\xcc\xcc\xcc\xcc\xcc\x1a@\x12\x03CNY\x1a\x03USD\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1a\x07\x08\xe6\x0f\x10\x03\x18\t*\xed\x01\n \x08\x01\x10\x01\x18\x01 \x01(\x010\x028\x01I\x9a\x99\x99\x99\x99\x99\xa9?Q\x9a\x99\x99\x99\x99\x99\xd9?\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\x94?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\xa4?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01"\x07\x08\xe6\x0f\x10\x03\x18\n"\x07\x08\xe9\x0f\x10\x03\x18\n'
        
        result = create_proxy_option_quote_matrix(
            underlying='SZ50Index.SSE',
            ref_vol_surface=self.vol_surf,
            ref_underlying_price=self.underlying_price,
            underlying_price=2968.14
            )

        self.assertEqual(result.SerializeToString(), expected)
        
    def test_eq_vol_surface_builder(self):
        expected = b'\x08\x01\n\x01\x12\x1e\x08\x01\x10\x01\x12\x08\x08\x01\x10\x01\x12\x08\x12\x1e\x08\x01\x10\x01\x12\x08\x16\x1e\x08\x01\x10\x01\x12\x08\x1a\x1e\x08\x01\x10\x01\x12\x08\x1e\x1e\x08\x01\x10\x01\x12\x08 \x1e\x08\x01\x10\x01\x12\x08"\x1e\x08\x01\x10\x01\x12\x08$\x1e\x08\x01\x10\x01\x12\x08&\x1e\x08\x01\x10\x01\x12\x08(\x1e\x08\x01\x10\x01\x12\x08*\x1e\x08\x01\x10\x01\x12\x08,\x1e\x08\x01\x10\x01\x12\x08.\x1e\x08\x01\x10\x01\x12\x08/\x1e\x08\x01\x10\x01\x12\x080\x1e\x08\x01\x10\x01\x12\x082\x1e\x08\x01\x10\x01\x12\x084\x1e\x08\x01\x10\x01\x12\x086\x1e\x08\x01\x10\x01\x12\x088\x1e\x08\x01\x10\x01\x12\x08:\x1e\x08\x01\x10\x01\x12\x08<\x1e\x08\x01\x10\x01\x12\x08>\x1e\x08\x01\x10\x01\x12\x08@\x1e\x08\x01\x10\x01\x12\x08B\x1e\x08\x01\x10\x01\x12\x08D\x1e\x08\x01\x10\x01\x12\x08F\x1e\x08\x01\x10\x01\x12\x08H\x1e\x08\x01\x10\x01\x12\x08J\x1e\x08\x01\x10\x01\x12\x08L\x1e\x08\x01\x10\x01\x12\x08N\x1e\x08\x01\x10\x01\x12\x08P\x1e\x08\x01\x10\x01\x12\x08R\x1e\x08\x01\x10\x01\x12\x08T\x1e\x08\x01\x10\x01\x12\x08V\x1e\x08\x01\x10\x01\x12\x08X\x1e\x08\x01\x10\x01\x12\x08Z\x1e\x08\x01\x10\x01\x12\x08\x5c\x1e\x08\x01\x10\x01\x12\x08\x5e\x1e\x08\x01\x10\x01\x12\x08\x60\x1e\x08\x01\x10\x01\x12\x08\x62\x1e\x08\x01\x10\x01\x12\x08\x64\x1e\x08\x01\x10\x01\x12\x08\x66\x1e\x08\x01\x10\x01\x12\x08\x68\x1e\x08\x01\x10\x01\x12\x08\x6a\x1e\x08\x01\x10\x01\x12\x08\x6c\x1e\x08\x01\x10\x01\x12\x08\x6e\x1e\x08\x01\x10\x01\x12\x08\x70\x1e\x08\x01\x10\x01\x12\x08\x72\x1e\x08\x01\x10\x01\x12\x08\x74\x1e\x08\x01\x10\x01\x12\x08\x76\x1e\x08\x01\x10\x01\x12\x08\x78\x1e\x08\x01\x10\x01\x12\x08\x7a'
        result = self.vol_surf
        self.assertEqual(result.SerializeToString(), expected)

    def test_eq_european_option_pricer(self):
        expected = b'\x08\x01\n\x01\x12\x1e\x08\x01\x10\x01\x12\x08\x08\x01\x10\x01\x12\x08\x12\x1e\x08\x01\x10\x01\x12\x08\x16\x1e\x08\x01\x10\x01\x12\x08\x1a\x1e\x08\x01\x10\x01\x12\x08\x1e\x1e\x08\x01\x10\x01\x12\x08 \x1e\x08\x01\x10\x01\x12\x08"\x1e\x08\x01\x10\x01\x12\x08$\x1e\x08\x01\x10\x01\x12\x08&\x1e\x08\x01\x10\x01\x12\x08(\x1e\x08\x01\x10\x01\x12\x08*\x1e\x08\x01\x10\x01\x12\x08,\x1e\x08\x01\x10\x01\x12\x08.\x1e\x08\x01\x10\x01\x12\x08/\x1e\x08\x01\x10\x01\x12\x080\x1e\x08\x01\x10\x01\x12\x082\x1e\x08\x01\x10\x01\x12\x084\x1e\x08\x01\x10\x01\x12\x086\x1e\x08\x01\x10\x01\x12\x088\x1e\x08\x01\x10\x01\x12\x08:\x1e\x08\x01\x10\x01\x12\x08<\x1e\x08\x01\x10\x01\x12\x08>\x1e\x08\x01\x10\x01\x12\x08@\x1e\x08\x01\x10\x01\x12\x08B\x1e\x08\x01\x10\x01\x12\x08D\x1e\x08\x01\x10\x01\x12\x08F\x1e\x08\x01\x10\x01\x12\x08H\x1e\x08\x01\x10\x01\x12\x08J\x1e\x08\x01\x10\x01\x12\x08L\x1e\x08\x01\x10\x01\x12\x08N\x1e\x08\x01\x10\x01\x12\x08P\x1e\x08\x01\x10\x01\x12\x08R\x1e\x08\x01\x10\x01\x12\x08T\x1e\x08\x01\x10\x01\x12\x08V\x1e\x08\x01\x10\x01\x12\x08X\x1e\x08\x01\x10\x01\x12\x08Z\x1e\x08\x01\x10\x01\x12\x08\x5c\x1e\x08\x01\x10\x01\x12\x08\x5e\x1e\x08\x01\x10\x01\x12\x08\x60\x1e\x08\x01\x10\x01\x12\x08\x62\x1e\x08\x01\x10\x01\x12\x08\x64\x1e\x08\x01\x10\x01\x12\x08\x66\x1e\x08\x01\x10\x01\x12\x08\x68\x1e\x08\x01\x10\x01\x12\x08\x6a\x1e\x08\x01\x10\x01\x12\x08\x6c\x1e\x08\x01\x10\x01\x12\x08\x6e\x1e\x08\x01\x10\x01\x12\x08\x70\x1e\x08\x01\x10\x01\x12\x08\x72\x1e\x08\x01\x10\x01\x12\x08\x74\x1e\x08\x01\x10\x01\x12\x08\x76\x1e\x08\x01\x10\x01\x12\x08\x78\x1e\x08\x01\x10\x01\x12\x08\x7a'
        
        inst = create_european_option(
            payoff_type='CALL',
            expiry=datetime(2020, 8, 19),
            delivery=datetime(2020, 8, 20),
            strike=2.958,
            nominal=1000000.0,
            payoff_ccy='CNY',
            underlying_type='SPOT_UNDERLYING_TYPE',
            underlying_ccy='CNY',
            underlying='SZ50Index.SSE'
        )

        result = eq_european_option_pricer(
            instrument=inst,
            pricing_date=datetime(2020, 2, 21),
            mkt_data_set=self.mkt_data_set,
            pricing_settings=self.bsm_analytical_pricing_settings,
            risk_settings=self.risk_settings,
            scn_settings=self.scenario_analysis_settings
        )

        self.assertEqual(result.SerializeToString(), expected)

    
    def test_eq_american_option_pricer(self):
        expected = b'\x08\x01\n\x01\x12\x1e\x08\x01\x10\x01\x12\x08\x08\x01\x10\x01\x12\x08\x12\x1e\x08\x01\x10\x01\x12\x08\x16\x1e\x08\x01\x10\x01\x12\x08\x1a\x1e\x08\x01\x10\x01\x12\x08\x1e\x1e\x08\x01\x10\x01\x12\x08 \x1e\x08\x01\x10\x01\x12\x08"\x1e\x08\x01\x10\x01\x12\x08$\x1e\x08\x01\x10\x01\x12\x08&\x1e\x08\x01\x10\x01\x12\x08(\x1e\x08\x01\x10\x01\x12\x08*\x1e\x08\x01\x10\x01\x12\x08,\x1e\x08\x01\x10\x01\x12\x08.\x1e\x08\x01\x10\x01\x12\x08/\x1e\x08\x01\x10\x01\x12\x080\x1e\x08\x01\x10\x01\x12\x082\x1e\x08\x01\x10\x01\x12\x084\x1e\x08\x01\x10\x01\x12\x086\x1e\x08\x01\x10\x01\x12\x088\x1e\x08\x01\x10\x01\x12\x08:\x1e\x08\x01\x10\x01\x12\x08<\x1e\x08\x01\x10\x01\x12\x08>\x1e\x08\x01\x10\x01\x12\x08@\x1e\x08\x01\x10\x01\x12\x08B\x1e\x08\x01\x10\x01\x12\x08D\x1e\x08\x01\x10\x01\x12\x08F\x1e\x08\x01\x10\x01\x12\x08H\x1e\x08\x01\x10\x01\x12\x08J\x1e\x08\x01\x10\x01\x12\x08L\x1e\x08\x01\x10\x01\x12\x08N\x1e\x08\x01\x10\x01\x12\x08P\x1e\x08\x01\x10\x01\x12\x08R\x1e\x08\x01\x10\x01\x12\x08T\x1e\x08\x01\x10\x01\x12\x08V\x1e\x08\x01\x10\x01\x12\x08X\x1e\x08\x01\x10\x01\x12\x08Z\x1e\x08\x01\x10\x01\x12\x08\x5c\x1e\x08\x01\x10\x01\x12\x08\x5e\x1e\x08\x01\x10\x01\x12\x08\x60\x1e\x08\x01\x10\x01\x12\x08\x62\x1e\x08\x01\x10\x01\x12\x08\x64\x1e\x08\x01\x10\x01\x12\x08\x66\x1e\x08\x01\x10\x01\x12\x08\x68\x1e\x08\x01\x10\x01\x12\x08\x6a\x1e\x08\x01\x10\x01\x12\x08\x6c\x1e\x08\x01\x10\x01\x12\x08\x6e\x1e\x08\x01\x10\x01\x12\x08\x70\x1e\x08\x01\x10\x01\x12\x08\x72\x1e\x08\x01\x10\x01\x12\x08\x74\x1e\x08\x01\x10\x01\x12\x08\x76\x1e\x08\x01\x10\x01\x12\x08\x78\x1e\x08\x01\x10\x01\x12\x08\x7a'
        
        inst = create_american_option(
            payoff_type='CALL',
            expiry=datetime(2020, 8, 19),
            delivery=datetime(2020, 8, 20),
            strike=2.958,
            nominal=1000000.0,
            payoff_ccy='CNY',
            underlying_type='SPOT_UNDERLYING_TYPE',
            underlying_ccy='CNY',
            underlying='SZ50Index.SSE'
        )

        result = eq_american_option_pricer(
            instrument=inst,
            pricing_date=datetime(2020, 2, 21),
            mkt_data_set=self.mkt_data_set,
            pricing_settings=self.bsm_pde_pricing_settings,
            risk_settings=self.risk_settings,
            scn_settings=self.scenario_analysis_settings
        )

        self.assertEqual(result.SerializeToString(), expected)
    
    def test_eq_asian_option_pricer(self):
        expected = b'\x08\x01\n\x01\x12\x1e\x08\x01\x10\x01\x12\x08\x08\x01\x10\x01\x12\x08\x12\x1e\x08\x01\x10\x01\x12\x08\x16\x1e\x08\x01\x10\x01\x12\x08\x1a\x1e\x08\x01\x10\x01\x12\x08\x1e\x1e\x08\x01\x10\x01\x12\x08 "\x1e\x08\x01\x10\x01\x12\x08$\x1e\x08\x01\x10\x01\x12\x08&\x1e\x08\x01\x10\x01\x12\x08(\x1e\x08\x01\x10\x01\x12\x08*\x1e\x08\x01\x10\x01\x12\x08,\x1e\x08\x01\x10\x01\x12\x08.\x1e\x08\x01\x10\x01\x12\x08/\x1e\x08\x01\x10\x01\x12\x080\x1e\x08\x01\x10\x01\x12\x082\x1e\x08\x01\x10\x01\x12\x084\x1e\x08\x01\x10\x01\x12\x086\x1e\x08\x01\x10\x01\x12\x088\x1e\x08\x01\x10\x01\x12\x08:\x1e\x08\x01\x10\x01\x12\x08<\x1e\x08\x01\x10\x01\x12\x08>\x1e\x08\x01\x10\x01\x12\x08@\x1e\x08\x01\x10\x01\x12\x08B\x1e\x08\x01\x10\x01\x12\x08D\x1e\x08\x01\x10\x01\x12\x08F\x1e\x08\x01\x10\x01\x12\x08H\x1e\x08\x01\x10\x01\x12\x08J\x1e\x08\x01\x10\x01\x12\x08L\x1e\x08\x01\x10\x01\x12\x08N\x1e\x08\x01\x10\x01\x12\x08P\x1e\x08\x01\x10\x01\x12\x08R\x1e\x08\x01\x10\x01\x12\x08T\x1e\x08\x01\x10\x01\x12\x08V\x1e\x08\x01\x10\x01\x12\x08X\x1e\x08\x01\x10\x01\x12\x08Z\x1e\x08\x01\x10\x01\x12\x08\x5c\x1e\x08\x01\x10\x01\x12\x08\x5e\x1e\x08\x01\x10\x01\x12\x08\x60\x1e\x08\x01\x10\x01\x12\x08\x62\x1e\x08\x01\x10\x01\x12\x08\x64\x1e\x08\x01\x10\x01\x12\x08\x66\x1e\x08\x01\x10\x01\x12\x08\x68\x1e\x08\x01\x10\x01\x12\x08\x6a\x1e\x08\x01\x10\x01\x12\x08\x6c\x1e\x08\x01\x10\x01\x12\x08\x6e\x1e\x08\x01\x10\x01\x12\x08\x70\x1e\x08\x01\x10\x01\x12\x08\x72\x1e\x08\x01\x10\x01\x12\x08\x74\x1e\x08\x01\x10\x01\x12\x08\x76\x1e\x08\x01\x10\x01\x12\x08\x78\x1e\x08\x01\x10\x01\x12\x08\x7a'
        
        inst = create_asian_option(
            payoff_type='CALL',
            expiry=datetime(2020, 8, 19),
            delivery=datetime(2020, 8, 20),
            strike=2.958,
            nominal=1000000.0,
            payoff_ccy='CNY',
            underlying_type='SPOT_UNDERLYING_TYPE',
            underlying_ccy='CNY',
            underlying='SZ50Index.SSE'
        )

        result = eq_asian_option_pricer(
            instrument=inst,
            pricing_date=datetime(2020, 2, 21),
            mkt_data_set=self.mkt_data_set,
            pricing_settings=self.bsm_mc_pricing_settings,
            risk_settings=self.risk_settings,
            scn_settings=self.scenario_analysis_settings
        )

        self.assertEqual(result.SerializeToString(), expected)
    def test_eq_digital_option_pricer(self):
        expected = b'\n\x07\x08\xe6\x0f\x10\x03\x18\t\x12X\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03CNY \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01\x1aX\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03USD \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01"\'\n\x13\t\xcd\xcc\xcc\xcc\xcc\xcc\x1a@\x12\x03CNY\x1a\x03USD\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1a\x07\x08\xe6\x0f\x10\x03\x18\t*\xed\x01\n \x08\x01\x10\x01\x18\x01 \x01(\x010\x028\x01I\x9a\x99\x99\x99\x99\x99\xa9?Q\x9a\x99\x99\x99\x99\x99\xd9?\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\x94?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\xa4?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01'
        
        inst = create_digital_option(
            payoff_type='CALL',
            expiry=datetime(2020, 8, 19),
            delivery=datetime(2020, 8, 20),
            strike=2.958,
            cash = 1.0,
            asset= 0.0,
            nominal=1000000.0,
            payoff_ccy='CNY',
            underlying_type='SPOT_UNDERLYING_TYPE',
            underlying_ccy='CNY',
            underlying='SZ50Index.SSE'
        )

        result = eq_digital_option_pricer(
            instrument=inst,
            pricing_date=datetime(2020, 2, 21),
            mkt_data_set=self.mkt_data_set,
            pricing_settings=self.bsm_mc_pricing_settings,
            risk_settings=self.risk_settings,
            scn_settings=self.scenario_analysis_settings
        )

        self.assertEqual(result.SerializeToString(), expected)
        
    def test_eq_single_barrier_option_pricer(self):
        expected = b'\n\x07\x08\xe6\x0f\x10\x03\x18\t\x12X\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03CNY \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01\x1aX\x12;\n7\n\x07\x08\xe6\x0f\x10\x03\x18\t\x10\x02\x1a\x07\x08\xe6\x0f\x10\x03\x18\n\x1a\x07\x08\xe9\x0f\x10\x03\x18\n"\x00*\x12\n\x10{\x14\xaeG\xe1z\x94?\x9a\x99\x99\x99\x99\x99\x99?0\x018\x01\x10\x01\x1a\x03USD \x01:\x12\x12\x10\x08\x01\x10\x01\x1a\x08\x00\x00\x00\x00\x00\x00\x00\x00 \x01"\'\n\x13\t\xcd\xcc\xcc\xcc\xcc\xcc\x1a@\x12\x03CNY\x1a\x03USD\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1a\x07\x08\xe6\x0f\x10\x03\x18\t*\xed\x01\n \x08\x01\x10\x01\x18\x01 \x01(\x010\x028\x01I\x9a\x99\x99\x99\x99\x99\xa9?Q\x9a\x99\x99\x99\x99\x99\xd9?\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\x94?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01\x1aV\x08\x01\x12\x07\x08\xe6\x0f\x10\x03\x18\t\x19\x9a\x99\x99\x99\x99\x99\xa9?!\x9a\x99\x99\x99\x99\x99\xd9?*\x12\n\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@0\x019{\x14\xaeG\xe1z\xa4?B\x12\n\x10\x9a\x99\x99\x99\x99\x99\xb9?\x9a\x99\x99\x99\x99\x99\xb9?J\x00R\x00X\x01'
        
        inst = create_single_barrier_option(
            payoff_type='CALL',
            expiry=datetime(2020, 8, 19),
            delivery=datetime(2020, 8, 20),
            strike=2.958,
            nominal=1000000.0,
            payoff_ccy='CNY',
            underlying_type='SPOT_UNDERLYING_TYPE',
            underlying_ccy='CNY',
            underlying='SZ50Index.SSE',
            barrier_type='UP',
            barrier=3.0
        )

        result = eq_single_barrier_option_pricer(
            instrument=inst,
            pricing_date=datetime(2020, 2, 21),
            mkt_data_set=self.mkt_data_set,
            pricing_settings=self.bsm_mc_pricing_settings,
            risk_settings=self.risk_settings,
            scn_settings=self.scenario_analysis_settings
        )

        self.assertEqual(result.SerializeToString(), expected)

if __name__ == "__main__":
    unittest.main()
